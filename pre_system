#!/bin/bash
#
# Goal:
# create a script which can pre a system for a netcool install. 
set -x
# Version 7 03/23/2016 
#
# Switched out the for loop to a while for reading in files in the copy_install_files()
# Added logic for copying files using an array
#
# New error! unexpected 
#
# Version 6 01/25/2016 
# ** Fixed typo with dir paths which causes the script to fail.
# Introduced new bug, with move_install function, it gets stuck in an infinited loop. 
#
# Version 5 01/20/2016 
# *** Need to be specific about what we are unziping/tar'ing
# *** Added function for unzip'ing and untar'ing
#
# Version 4 12/28/2015 
# *** Added unzip function 
# *** Testing failed install func()
#
# Version 3 - 12/22/2015
#
# TODO:
# Create archive with installation packages for
# >> Probes
# >> OMNIbus 8.1 Core
# >> Jar Files required by ALU probe
# >> JDK 1.7.x required by latest version of ALU probe (which connects to AMS 9.4.x)
# 
# create response file for silent install for future versions (probes, core omnibus)
# Copy pam files to correct omnibus names
# 
# post configurations
# 
# >> Update omni.dat
# >> run nco_igen
# >> create object server with previous exported configuration
# >> Configure on boot /etc/init.d/nco script
# >> Copy, unpack and remove JDK package in $NCHOME
# >> Copy ALU require jar files to $OMNIHOME/probes/java/nco_p_alcatel_oad directory and untar and remove tar
# >> Create $NCHOME/etc/props and all subdirectories 
# >> cp gateway files for unigates, jdbc, and bidi
# >> Recreate GFTT automations and tools 
# >> Copy system-auth to correct file names (required for nco_pa* tools) 
#
#
#
# Add getopts to script to configure what we want. ** Completed
#
# Define environment variable locations of packages
#

PROGNAME=$(basename $0)

package_dir=/var/opt/omnibus_build
package_probes=${package_dir}/probes
package_configs=${package_dir}/configs
package_response_files=${package_dir}/response_files

install_target=/var/opt
install_man=/var/opt/IBM/tivoli/InstallationManager/eclipse
install_shared_re=/var/opt/IBM/tivoli/IBMIMShared

usage() {
  echo "Usage: $0 [-t impactpri|impactsec|colobj|aggobj|itnmpri|itnmsec|webgui]" 1>&2;
  exit 1;
}

while getopts ":t:" o; do
  case "${o}" in
      t)
        t=${OPTARG}
        ;;
      *)
        usage
        ;;
   esac
done

shift "$((OPTIND-1))"

#if [ -z ${t} ]; then
#  usage
#fi

error_func() { 
  echo "$1" >> error.out 
  exit 1;
}

create_group_and_user() {

sudo groupadd ncoadmin 

if [ $? -eq "0" ]; then
  echo "Group created"
else
  error_func "Error Creating Group"
fi

sudo useradd -m netcool -G ncoadmin

if [ $? -eq "0" ]; then
  echo "Added user to group"
else
  error_func "Error adding user to Group"
fi

sudo cp ${PWD}/.bashrc_prompt ~netcool/.bashrc

if [ $? -eq "0" ]; then
  echo ".bashrc copied to netcool"
else
  error_func "Error copying .bashrc_prompt file"
fi

id netcool

}

change_perms() {

sudo chown root:ncoadmin ${install_target}

if [ $? -eq "0" ]; then
  echo "Dir chowned"
else
  error_func "Error chowning dir"
fi

sudo chmod g+wrx ${install_target}

if [ $? -eq "0" ]; then
  echo "chmod executed"
else
  error_func "Error chmod"
fi

}

check_for_dir() {

if [ ${t} == "webgui" ]; then 
  sudo mkdir -p ${package_dir}/${t}/WAS
    if [ $? -eq "0" ]; then
      echo "${package_dir}/${t}/WAS package directory created"
    else
      error_func "Error Creating ${package_dir}/${t}/WAS package directory"
    fi
  sudo mkdir -p ${package_dir}/${t}/Jazz
    if [ $? -eq "0" ]; then
      echo "${package_dir}/${t}/Jazz package directory created"
    else
      error_func "Error Creating ${package_dir}/${t}/Jazz package directory"
    fi
  sudo mkdir -p ${package_dir}/${t}/webgui
    if [ $? -eq "0" ]; then
      echo "${package_dir}/${t}/webgui package directory created"
    else
      error_func "Error Creating ${package_dir}/${t}/webgui package directory"
    fi
elif [[ ${t} == "impactpri" ]] || [[ ${t} == "impactsec" ]]; then
  sudo mkdir -p ${package_dir}/${t}
    if [ $? -eq "0" ]; then
      echo "${package_dir}/${t} package directory created"
    else
      error_func "Error Creating ${package_dir}/${t} package directory"
    fi
elif [ ${t} == "colobj" ] || [ ${t} == "aggobj" ]; then
  sudo mkdir -p ${package_dir}/${t}
    if [ $? -eq "0" ]; then
      echo "${package_dir}/${t} package directory created"
    else
      error_func "Error Creating ${package_dir}/${t} package directory"
    fi
elif [ ${t} == "itnmpri" ] || [ ${t} == "itnmsec" ]; then
  sudo mkdir -p ${package_dir}/${t}
    if [ $? -eq "0" ]; then
      echo "${package_dir}/${t} package directory created"
    else
      error_func "Error Creating ${package_dir}/${t} package directory"
    fi
else 
  echo "Directory already exists" 
fi

}

copy_install_files() {

FS=$'\n' read -d '' -r -a lines <install_files

if [ ${t} == "webgui" ]; then
  sudo cp ${lines[11]} ${package_dir}/${t}/Jazz
    if [ $? -eq "0" ]; then
      echo "Success: ${lines[11]} has been copied to ${package_dir}/${t}/Jazz"
    else
      error_func "Error: Copying ${lines[11]} to ${package_dir}/${t}/Jazz directory"
    fi
  sudo cp ${lines[10]} ${package_dir}/${t}/webgui
    if [ $? -eq "0" ]; then
      echo "Success: ${lines[10]} has been copied to ${package_dir}/${t}/webgui"
    else
      error_func "Error: Copying ${lines[10]} to ${package_dir}/${t}/webgui directory"
    fi
  sudo cp ${lines[7]} ${package_dir}/${t}/WAS
    if [ $? -eq "0" ]; then
      echo "Success: ${lines[7]} has been copied to ${package_dir}/${t}/WAS"
    else
      error_func "Error: Copying ${lines[7]} to ${package_dir}/${t}/WAS directory"
    fi
elif [ ${t} == "impactpri" ] || [ ${t} == "impactsec" ]; then
  sudo cp ${lines[0]} ${package_dir}/${t}
    if [ $? -eq "0" ]; then
      echo "Success: ${lines[0]} has been copied to ${package_dir}/${t}"
    else
      error_func "Error: Copying ${lines[0]} to ${package_dir}/${t} directory"
    fi
elif [ ${t} == "colobj" ] || [ ${t} == "colagg" ]; then
  sudo cp ${lines[1]} ${package_dir}/${t}
    if [ $? -eq "0" ]; then
      echo "Success: ${lines[1]} has been copied to ${package_dir}/${t}"
    else
      error_func "Error: Copying ${lines[1]} to ${package_dir}/${t} directory"
    fi
elif [ ${t} == "itnmpri" ] || [ ${t} == "itnmsec" ]; then
  sudo cp ${lines[8]} ${package_dir}/${t}
    if [ $? -eq "0" ]; then
      echo "Success: ${lines[8]} has been copied to ${package_dir}/${t}"
    else
      error_func "Error: Copying ${lines[8]} to ${package_dir}/${t} directory"
    fi
else 
  echo "Unsupported\n"
fi

}

chown_perms() {

sudo chown -R netcool:ncoadmin ${install_target}
  if [ $? -eq "0" ]; then
    echo "Chowned installs"
  else
    error_func "Error chowning installs"
 fi

}


delete_failed_install() {

sudo userdel -r netcool
  if [ $? -eq "0" ]; then
    echo "Deleting the netcool user"
  else
    error_func "Error deleting the netcool user"
  fi

sudo groupdel ncoadmin 
  if [ $? -eq "0" ]; then
    echo "Deleting the netcool user"
  else
    error_func "Error deleting the netcool user"
  fi

sudo rm -Rf ${package_dir}
  if [ $? -eq "0" ]; then
    echo "Deleting the ${package_dir}"
  else
    error_func "Error deleting the ${package_dir}"
  fi

}

## Main

if [ -z ${t} ]; then
  usage
elif [ ${t} == "delete" ]; then
  delete_failed_install		
else 
  create_group_and_user
  change_perms
  check_for_dir
  copy_install_files
  chown_perms
fi 
